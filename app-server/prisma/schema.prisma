// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  username     String            @unique
  passwordHash String
  phoneNumber  String            @unique
  lastSeen     DateTime?         @default(now())
  status       String?
  chats        UserChatMapping[]
  // TODO message should be under chat
  // 
  Message      Message?
  Contact      Contact?
}

model Chat {
  id           String            @id @default(uuid())
  creationDate DateTime          @default(now())
  users        UserChatMapping[]
  messages     Message[]
}

// intermediate table for many-to-many relationship between Users and Chats
model UserChatMapping {
  user   User   @relation(fields: [userId], references: [id])
  userId String // relation scalar field (used in the `@relation` attribute above)

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, chatId])
}

model Message {
  id String @id @default(uuid())

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String @unique // relation scalar field (used in the `@relation` attribute above)

  text        String
  type        String   @default("text") // could be "text", "image", "video", etc.
  timestamp   DateTime @default(now())
  readReceipt Boolean  @default(false)
}

// optional: contacts table
model Contact {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  nickname      String?
  blockedStatus Boolean @default(false)
}
