// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }

// Define your models here

model User {
  id                Int          @id @default(autoincrement())
  username          String       @unique
  passwordHash      String
  phoneNumber       String       @unique
  lastSeen          DateTime?    @default(now())
  profilePictureURL String?
  status            String?
  chats             Chat[]       @relation("UsersChats")
  messages          Message[]
  UsersChats        UsersChats[]
  Contact           Contact[]
  Contact           Contact[]
  Contact           Contact[]
}

model Chat {
  id           Int          @id @default(autoincrement())
  chatName     String?
  isGroupChat  Boolean      @default(false)
  creationDate DateTime     @default(now())
  users        User[]       @relation("UsersChats")
  messages     Message[]
  UsersChats   UsersChats[]
}

// Intermediate table for many-to-many relationship between Users and Chats
model UsersChats {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  @@id([userId, chatId])
}

model Message {
  id          Int      @id @default(autoincrement())
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      Int
  sender      User     @relation(fields: [senderId], references: [id])
  senderId    Int
  messageText String
  messageType String   @default("text") // Could be "text", "image", "video", etc.
  timestamp   DateTime @default(now())
  readReceipt Boolean  @default(false)
}

// Optional: Contacts table
model Contact {
  id            Int     @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [id], name: "user")
  userId        Int
  contact       User    @relation(fields: [contactId], references: [id], name: "contact")
  contactId     Int
  nickname      String?
  blockedStatus Boolean @default(false)
  User          User    @relation(fields: [userId], references: [id])

  @@unique([userId, contactId])
}
